import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from database_funcs import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
bot = Bot(token="8132011839:AAEd3cXvgoqG10vnIEA0MmQc21xoj8Whs8E")
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class ReviewStates(StatesGroup):
    waiting_for_rating = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥
    waiting_for_comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    confirming_comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    waiting_for_review_rating = State() # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–∑—ã–≤–∞


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –¢–û–ü-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def get_teacher_keyboard(teacher_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=f"reviews_{teacher_id}")],
            [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate_{teacher_id}")]
        ]
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
def get_rating_keyboard(teacher_id):
    keyboard = InlineKeyboardBuilder()
    for i in range(1, 6):
        keyboard.button(text=f"{i}‚≠ê", callback_data=f"stars_{i}")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_rating")
    keyboard.adjust(3, 2)
    return keyboard.as_markup()


def rate_review_keyboard(review_id):
    review = db.get_review_by_id(review_id)
    if not review:
        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return InlineKeyboardBuilder().as_markup()

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=f"üëç {review['review_likes']}", callback_data=f"review_like-{review_id}")
    keyboard.button(text=f"üëé {review['review_dislikes']}", callback_data=f"review_dislike-{review_id}")
    keyboard.adjust(2)
    return keyboard.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def get_comment_cancel_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="no_comment")]]
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def get_confirm_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")]
        ]
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ß–∏—Ç–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome_text, reply_markup=get_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢–û–ü-5
@dp.message(F.text == "üèÜ –¢–û–ü-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def show_top_teachers(message: types.Message, state: FSMContext):
    await state.clear()
    top_teachers = db.get_top_teachers(5)

    if not top_teachers:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏")
        return

    text = "üèÜ –¢–û–ü-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, teacher in enumerate(top_teachers, 1):
        text += f"{i}. {teacher['surname']} {teacher['name']} {teacher['middlename']}\n"
        text += f"   ‚≠ê {teacher['overall_rating']['average']:.1f} ({teacher['overall_rating']['count']} –æ—Ç–∑—ã–≤–æ–≤)\n"
        text += f"   üèõ {teacher['institute']}, {teacher['department']}\n\n"

    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
async def show_teachers_list(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_teachers(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@dp.message(F.text)
async def handle_search(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text in ["üèÜ –¢–û–ü-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", "üîç –ü–æ–∏—Å–∫"]:
        return

    await state.clear()
    results = db.search_teachers(message.text)

    if not results:
        await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teacher = results[0]
    await show_teacher_card(message, teacher)


# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
async def show_teacher_card(message: types.Message, teacher):
    text = (
        f"üë®‚Äçüè´ {teacher['surname']} {teacher['name']} {teacher['middlename']}\n"
        f"üèõ {teacher['institute']}, {teacher['department']}\n"
        f"üéì {teacher['title']}\n"
        f"üìö {', '.join(teacher['subjects'])}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {teacher['overall_rating']['average']:.1f}/5 ({teacher['overall_rating']['count']} –æ—Ç–∑—ã–≤–æ–≤)"
    )

    await message.answer(text, reply_markup=get_teacher_keyboard(teacher['id']))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
@dp.callback_query(F.data.startswith("reviews_"))
async def show_reviews(callback: types.CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split("_")[1])
    teacher = db.get_teacher_by_id(teacher_id)

    if not teacher or not teacher['reviews']:
        await callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = db.get_teacher_reviews(teacher_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await state.update_data(teacher_id=teacher_id, current_review_index=0)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    review = reviews[0]
    text = (
        f'‚≠êÔ∏è {review["rating"]}/5\n\n'
        f'üí¨ {review["comment"]}\n\n'
    )

    await callback.message.answer(text, reply_markup=rate_review_keyboard(review["review_id"]))
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏
@dp.callback_query(F.data.startswith("rate_"))
async def start_rating(callback: types.CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(teacher_id=teacher_id)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
    await state.set_state(ReviewStates.waiting_for_rating)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=get_rating_keyboard(teacher_id)
    )
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∏
@dp.callback_query(ReviewStates.waiting_for_rating, F.data == "cancel_rating")
async def cancel_rating(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥
@dp.callback_query(ReviewStates.waiting_for_rating, F.data.startswith("stars_"))
async def handle_stars(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    await state.update_data(rating=rating)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(ReviewStates.waiting_for_comment)

    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'):",
        reply_markup=get_comment_cancel_keyboard()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query(ReviewStates.waiting_for_comment, F.data == "no_comment")
async def no_comment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    db.add_review(data['teacher_id'], str(callback.from_user.id), data['rating'], "")

    await callback.message.answer("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message(ReviewStates.waiting_for_comment, F.text)
async def handle_comment(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(comment=message.text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(ReviewStates.confirming_comment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    await message.answer(
        f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode="Markdown",
        reply_markup=get_confirm_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query(ReviewStates.confirming_comment, F.data == "confirm_yes")
async def confirm_comment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    success = db.add_review(data['teacher_id'], str(callback.from_user.id), data['rating'], data['comment'])

    if success:
        await callback.message.answer("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")

    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query(ReviewStates.confirming_comment, F.data == "confirm_no")
async def reject_comment(callback: types.CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(ReviewStates.waiting_for_comment)

    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
        reply_markup=get_comment_cancel_keyboard()
    )
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
@dp.callback_query(F.data.startswith("review_"))
async def handle_review_rating(callback: types.CallbackQuery):
    action, review_id_str = callback.data.split("-")
    review_id = int(review_id_str)
    user_id = str(callback.from_user.id)

    if "dislike" in action:
        success = db.rate_review(review_id, user_id, dislike=1)
        message = "üëé" if success else "‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤"
    else:
        success = db.rate_review(review_id, user_id, like=1)
        message = "üëç" if success else "‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—á—Ç–µ–Ω
    if success:
        review = db.get_review_by_id(review_id)
        if review:
            text = (
                f'‚≠êÔ∏è {review["rating"]}/5\n\n'
                f'üí¨ {review["comment"]}\n\n'
            )
            try:
                await callback.message.edit_text(text, reply_markup=rate_review_keyboard(review_id))
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                if "message is not modified" not in str(e):
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.answer(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())